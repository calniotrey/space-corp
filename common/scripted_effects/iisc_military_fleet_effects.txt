# prev = corp
# this = shipyard (planet currently)
create_corp_military_fleet = {
	create_fleet = {
		name = random
		effect = {
			set_owner = prevprev
			set_name = random
			set_location = prev
			set_fleet_stance = passive
			build_military_ships = yes
			set_military_fleet_orders = yes
		}
	}
}

# this = fleet
build_military_ships = {
	# TODO spawn other types of ships
	while = {
		limit = {
			owner = {
				check_variable = {
					which = space_corp_budget_military
					value >= @corps_destroyer_cost
				}
			}
		}
		count = 2
		owner = {
			subtract_corp_money = {
				TYPE = military
				AMOUNT = @corps_destroyer_cost
			}
		}
		create_ship = {
			name = random
			random_existing_design = destroyer
		}
	}
	while = {
		limit = {
			owner = {
				check_variable = {
					which = space_corp_budget_military
					value >= @corps_corvette_cost
				}
			}
		}
		count = 4
		owner = {
			subtract_corp_money = {
				TYPE = military
				AMOUNT = @corps_corvette_cost
			}
		}
		create_ship = {
			name = random
			random_existing_design = corvette
		}
	}
}

# this = fleet
override_fleet_action = {
	set_variable = {
		which = inactive_fleet_action_id
		value = fleet_action_id
	}
	set_variable = {
		which = fleet_action_id
		value = $ACTION_ID$
	}
	set_fleet_flag = overriden_fleet_action
}

# this = fleet
resume_fleet_action = {
	set_variable = {
		which = fleet_action_id
		value = inactive_fleet_action_id
	}
	set_variable = {
		which = inactive_fleet_action_id
		value = 0
	}
	remove_fleet_flag = overriden_fleet_action
	set_fleet_flag = recalculate_military_fleets_order
}

# sets orders according to fleet_action_id
# used when spawned and when idle
# this = fleet
set_military_fleet_orders = {
	set_fleet_flag = recalculate_military_fleets_order
	remove_fleet_flag = changed_orders
	while = {
		# do ... while basically
		limit = {
			should_recalculate_military_fleets_orders = yes
		}
		remove_fleet_flag = recalculate_military_fleets_order
		# idle
		if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 0
				}
			}
			set_military_orders_0 = yes
		}
		# patrolling
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 1
				}
			}
			set_military_orders_1 = yes
		}
		# escorting
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 2
				}
			}
			set_military_orders_2 = yes
		}
		# temporary escorting
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 3
				}
			}
			set_military_orders_3 = yes
		}
		# awaiting reinforcement
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 4
				}
			}
			set_military_orders_4 = yes
		}
		# attacking target
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 5
				}
			}
			set_military_orders_5 = yes
		}
		# going back to repair
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 8
				}
			}
			set_military_orders_8 = yes
		}
		# going back to shipyard
		else_if = {
			limit = {
				check_variable = {
					which = fleet_action_id
					value = 9
				}
			}
			set_military_orders_9 = yes
		}
		if = {
			limit = {
				has_fleet_flag = recalculate_military_fleets_order
			}
			set_fleet_flag = changed_orders
		}
	}
	carry_out_military_fleets_orders = yes
	save_event_target_as = military_fleet
	owner = {
		country_event = {
			id = space_corps_military.10
			days = 30
			random = 30
		}
	}
}

recalculate_military_fleets_orders = {
}

# this = fleet
set_military_orders_0 = {
	set_variable = {
		which = fleet_action_id
		value = 1
	}
	select_patrolling_destination = yes
	set_fleet_flag = recalculate_military_fleets_order
}

# this = fleet
set_military_orders_1 = {
	# check for ennemies in solar_system
	if = {
		limit = {
			exists = solar_system
			has_local_hostile = yes
		}
		hunt_local_hostile_and_override = yes
		set_fleet_flag = changed_destination
		set_fleet_flag = recalculate_military_fleets_order
	}
	# check if should go back to get new ships
	else_if = {
		limit = {
			has_fleet_flag = fleet_needs_new_ships
		}
		set_variable = {
			which = fleet_action_id
			value = 9
		}
		set_fleet_flag = recalculate_military_fleets_order
	}
	# check for allied convoy needing escort
	else_if = {
		limit = {
			has_allied_convoy_needing_escort = yes
		}
		escort_closest_allied_convoy_fleet = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
	# check for allies needing escort
	else_if = {
		limit = {
			has_allies_needing_escort = yes
		}
		escort_closest_allied_fleet = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
	# check for ennemies close to HQ
	else_if = {
		limit = {
			has_close_hostile = yes
		}
		hunt_close_hostile_and_override = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
}

# this = fleet
set_military_orders_2 = {
	# log = "----------------------------"
	# if = {
	# 	limit = {
	# 		exists = event_target:escort_target
	# 	}
	# 	log = "escort target exists :"
	# 	event_target:escort_target = {
	# 		log = "escort target exists : [This.GetName]"
	# 	}
	# }
	if = {
		limit = {
			exists = solar_system
			exists = event_target:escort_target
			exists = event_target:escort_target.solar_system
			solar_system = {
				is_same_value = event_target:escort_target.solar_system
			}
			has_local_hostile = yes
		}
		hunt_local_hostile_and_override = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
	else_if = {
		limit = {
			NAND = {
				exists = event_target:escort_target
				event_target:escort_target = {
					has_fleet_flag = is_escorted
				}
			}
		}
		# switch back to patrolling
		set_variable = {
			which = fleet_action_id
			value = 1
		}
		set_fleet_flag = recalculate_military_fleets_order
	}
}

# this = fleet
set_military_orders_3 = {
	# check if should go back to get new ships
	if = {
		limit = {
			has_fleet_flag = fleet_needs_new_ships
		}
		set_variable = {
			which = fleet_action_id
			value = 9
		}
		set_fleet_flag = recalculate_military_fleets_order
		if = {
			limit = {
				exists = event_target:temp_escort_target
			}
			event_target:temp_escort_target = {
				remove_fleet_flag = is_escorted
				remove_fleet_flag = is_escorted_by_@prev
			}
		}
	}
	# check for allied convoy needing escort
	else_if = {
		limit = {
			has_allied_convoy_needing_escort = yes
		}
		if = {
			limit = {
				exists = event_target:temp_escort_target
			}
			event_target:temp_escort_target = {
				remove_fleet_flag = is_escorted
				remove_fleet_flag = is_escorted_by_@prev
			}
		}
		escort_closest_allied_convoy_fleet = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
	else_if = {
		limit = {
			exists = solar_system
			exists = event_target:temp_escort_target
			exists = event_target:temp_escort_target.solar_system
			solar_system = {
				is_same_value = event_target:temp_escort_target.solar_system
			}
			has_local_hostile = yes
		}
		hunt_local_hostile_and_override = yes
		set_fleet_flag = recalculate_military_fleets_order
	}
	else_if = {
		limit = {
			NAND = {
				exists = event_target:temp_escort_target
				event_target:temp_escort_target = {
					has_fleet_flag = is_escorted
				}
			}
		}
		# switch back to patrolling
		set_variable = {
			which = fleet_action_id
			value = 1
		}
		set_fleet_flag = recalculate_military_fleets_order
		if = {
			limit = {
				exists = event_target:temp_escort_target
			}
			event_target:temp_escort_target = {
				remove_fleet_flag = is_escorted
				remove_fleet_flag = is_escorted_by_@prev
			}
		}
	}
}

# this = fleet
set_military_orders_4 = {
	#TODO
}

# this = fleet
set_military_orders_5 = {
	# resume normal operations if target gone
	if = {
		limit = {
			has_fleet_flag = overriden_fleet_action
			exists = event_target:attack_target
			exists = event_target:attack_target.solar_system
			check_variable = {
				which = inactive_fleet_action_id
				value = 2
			}
			exists = event_target:escort_target
			exists = event_target:escort_target.solar_system
			NOT = {
				event_target:escort_target.solar_system = {
					is_same_value = event_target:attack_target.solar_system
				}
			}
		}
		# resume operations
		resume_fleet_action = yes
	}
	else_if = {
		limit = {
			NOT = {
				exists = event_target:attack_target
			}
			has_fleet_flag = overriden_fleet_action
		}
		resume_fleet_action = yes
	}
	else_if = {
		limit = {
			NOT = {
				exists = event_target:attack_target
			}
		}
		set_variable = {
			which = fleet_action_id
			value = 1
		}
		set_fleet_flag = recalculate_military_fleets_order
	}
}

# this = fleet
set_military_orders_8 = {
	#TODO
}

# this = fleet
set_military_orders_9 = {
	if = {
		limit = {
			exists = orbit
			orbit = {
				is_same_value = event_target:headquarters_planet
			}
		}
		# reached shipyard, build ships and go back
		build_military_ships = yes
		remove_fleet_flag = fleet_needs_new_ships
		set_variable = {
			which = fleet_action_id
			value = 1
		}
		set_fleet_flag = recalculate_military_fleets_order
	}
	# else_if = {
	# 	limit = {
	# 		NAND = {
	# 			exists = event_target:military_target
	# 			event_target:military_target = {
	# 				is_same_value = event_target:headquarters_planet
	# 			}
	# 		}
	# 	}
	# 	# set destination to shipyard
	# 	event_target:headquarters_planet = {
	# 		save_event_target_as = military_target
	# 	}
	# 	set_fleet_flag = changed_destination
	# }
}

# this = fleet
carry_out_military_fleets_orders = {
	# idle
	if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 0
			}
		}
		apply_military_orders_0 = yes
	}
	# patrolling
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 1
			}
		}
		apply_military_orders_1 = yes
	}
	# escorting
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 2
			}
		}
		apply_military_orders_2 = yes
	}
	# temporary escorting
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 3
			}
		}
		apply_military_orders_3 = yes
	}
	# awaiting reinforcement
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 4
			}
		}
		apply_military_orders_4 = yes
	}
	# attacking target
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 5
			}
		}
		apply_military_orders_5 = yes
	}
	# going back to repair
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 8
			}
		}
		apply_military_orders_8 = yes
	}
	# going back to shipyard
	else_if = {
		limit = {
			check_variable = {
				which = fleet_action_id
				value = 9
			}
		}
		apply_military_orders_9 = yes
	}
}

# this = fleet
apply_military_orders_0 = {
	# chilling?
	clear_fleet_actions = this
	clear_orders = yes
	remove_auto_move_target = yes
}

# this = fleet
apply_military_orders_1 = {
	if = {
		limit = {
			OR = {
				has_fleet_flag = changed_orders
				# reached destination
				AND = {
					exists = orbit
					exists = event_target:patrol_target
					orbit = {
						is_same_value = event_target:patrol_target
					}
				}
				is_fleet_idle = yes
			}
		}
		# stop
		clear_fleet_actions = this
		clear_orders = yes
		remove_auto_move_target = yes
		select_patrolling_destination = yes
		queue_actions = {
			move_to = event_target:patrol_target
			orbit_planet = event_target:patrol_target
		}
	}
}

# this = fleet
apply_military_orders_2 = {
	if = {
		limit = {
			OR = {
				has_fleet_flag = changed_orders
				is_fleet_idle = yes
			}
		}
		# stop
		remove_auto_move_target = yes
		clear_fleet_actions = this
		clear_orders = yes
		# log = "escorting fleet:"
		# event_target:escort_target = {
		# 	log = "escorting fleet: name = [This.GetName]"
		# }
		auto_follow_fleet = {
			target = event_target:escort_target
			attack_fleet = no
		}
	}
}

# this = fleet
apply_military_orders_3 = {
	if = {
		limit = {
			OR = {
				has_fleet_flag = changed_orders
				is_fleet_idle = yes
			}
		}
		# stop
		remove_auto_move_target = yes
		clear_fleet_actions = this
		clear_orders = yes
		# log = "temp escorting fleet:"
		# event_target:temp_escort_target = {
		# 	log = "temp escorting fleet: name = [This.GetName]"
		# }
		auto_follow_fleet = {
			target = event_target:temp_escort_target
			attack_fleet = no
		}
	}
}

# this = fleet
apply_military_orders_4 = {
	#TODO
}

# this = fleet
apply_military_orders_5 = {
	if = {
		limit = {
			OR = {
				has_fleet_flag = changed_orders
				is_fleet_idle = yes
			}
		}
		# stop
		remove_auto_move_target = yes
		clear_fleet_actions = this
		clear_orders = yes
		# log = "attacking fleet:"
		# event_target:attack_target = {
		# 	log = "attacking fleet: name = [This.GetName]"
		# }
		auto_follow_fleet = {
			target = event_target:attack_target
			attack_fleet = yes
		}
	}
}

# this = fleet
apply_military_orders_8 = {
	#TODO
}

# this = fleet
apply_military_orders_9 = {
	if = {
		limit = {
			OR = {
				has_fleet_flag = changed_orders
				is_fleet_idle = yes
			}
		}
		# stop
		remove_auto_move_target = yes
		clear_fleet_actions = this
		clear_orders = yes
		auto_move_to_planet = {
			target = event_target:headquarters_planet
			clear_auto_move_on_arrival = yes
		}
	}
}

# this = fleet
select_patrolling_destination = {
	# log = "searching patrolling"
	# if = {
	# 	limit = {
	# 		solar_system = {
	# 			prev.owner = {
	# 				intel_level = {
	# 					level > none
	# 					system = prev
	# 				}
	# 			}
	# 		}
	# 	}
	# 	# log = "has intel"
	# }
	# if = {
	# 	limit = {
	# 		solar_system = {
	# 			has_access_fleet = prev.owner
	# 		}
	# 	}
	# 	# log = "has access"
	# }
	# if = {
	# 	limit = {
	# 		solar_system = {
	# 			distance = {
	# 				source = event_target:headquarters_planet
	# 				max_jumps = @patrol_close_system
	# 				type = hyperlane
	# 			}
	# 		}
	# 	}
	# 	# log = "has distance"
	# }
	random_system = {
		limit = {
			prev = {
				owner = {
					intel_level = {
						level > none
						system = prevprev
					}
				}
			}
			has_access_fleet = prev.owner
			distance = {
				source = event_target:headquarters_planet
				max_jumps = @patrol_close_system
				type = hyperlane
			}
		}
		# log = "found patrolling system"
		random_system_planet = {
			# log = "found patrolling system planet"
			save_event_target_as = patrol_target
		}
	}
}

# this = fleet
escort_closest_allied_fleet = {
	closest_system = {
		limit = {
			any_fleet_in_system = {
				has_fleet_flag = fleet_needs_escort
				exists = owner
				owner = {
					is_same_value = prevprevprev.owner
				}
			}
		}
		random_fleet_in_system = {
			limit = {
				has_fleet_flag = fleet_needs_escort
				exists = owner
				owner = {
					is_same_value = prevprevprev.owner
				}
			}
			remove_fleet_flag = fleet_needs_escort
			set_fleet_flag = is_escorted
			set_fleet_flag = is_escorted_by_@prevprev
			save_event_target_as = temp_escort_target
		}
	}
	set_variable = {
		which = fleet_action_id
		value = 3
	}
}

# this = fleet
escort_closest_allied_convoy_fleet = {
	closest_system = {
		limit = {
			any_fleet_in_system = {
				has_fleet_flag = fleet_needs_escort
				has_fleet_flag = space_corps_convoy
				exists = owner
				owner = {
					is_same_value = prevprevprev.owner
				}
			}
		}
		random_fleet_in_system = {
			limit = {
				has_fleet_flag = fleet_needs_escort
				has_fleet_flag = space_corps_convoy
				exists = owner
				owner = {
					is_same_value = prevprevprev.owner
				}
			}
			remove_fleet_flag = fleet_needs_escort
			set_fleet_flag = is_escorted
			set_fleet_flag = is_escorted_by_@prevprev
			save_event_target_as = escort_target
		}
	}
	set_variable = {
		which = fleet_action_id
		value = 2
	}
}

# this = fleet
hunt_local_hostile_and_override = {
	solar_system = {
		random_fleet_in_system = {
			limit = {
				owner = {
					is_hostile = prevprevprev.owner
				}
			}
			save_event_target_as = attack_target
		}
	}
	override_fleet_action = {
		ACTION_ID = 5
	}
}

# this = fleet
hunt_close_hostile_and_override = {
	closest_system = {
		limit = {
			has_access_fleet = prev.owner
			prev.owner = {
				intel_level = {
					level > medium
					system = prev
				}
			}
			distance = {
				source = event_target:headquarters_planet
				max_jumps = @patrol_close_system
				type = hyperlane
			}
			any_fleet_in_system = {
				owner = {
					is_hostile = prevprevprev.owner
				}
			}
		}
		random_fleet_in_system = {
			limit = {
				owner = {
					is_hostile = prevprevprev.owner
				}
			}
			save_event_target_as = attack_target
		}
	}
	override_fleet_action = {
		ACTION_ID = 5
	}
}
