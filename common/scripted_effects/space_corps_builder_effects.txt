#this = corp
create_builder_fleet = {
	subtract_corp_money = {
		TYPE = builder
		AMOUNT = @builder_cost
	}
	create_fleet = {
		name = random
		effect = {
			set_owner = prev
			set_name = random
			set_location = event_target:headquarters_planet
			set_fleet_stance = passive
			create_ship = {
				name = random
				random_existing_design = constructor
			}
			set_builders_orders = yes
		}
	}
}

# this = builder fleet
# has headquarters loaded
set_builders_orders = {
	# log = "set_builders_orders.1"
	if = {
		limit = {
			exists = orbit
			exists = event_target:builder_destination
			orbit = {
				is_same_value = event_target:builder_destination
				has_deposit_for = shipclass_mining_station
				has_mining_station = no
			}
			owner = {
				space_corp_searches_mining_stations = yes
				check_variable = {
					which = space_corp_budget_mining_station
					value >= space_corps_mining_station_total_cost
				}
			}
		}
		owner = {
			# log = "Subtracting money"
			subtract_corp_money = {
				TYPE = mining_station
				AMOUNT = space_corps_mining_station_total_cost
			}
			if = {
				limit = {
					exists = overlord
				}
				change_variable = {
					which = total_payed_for_licenses
					value = space_corps_mining_license_cost
				}
				overlord = {
					change_variable = {
						which = total_received_from_licenses
						value = space_corps_mining_license_cost
					}
					add_variable_resource = {
						RESOURCE = energy
						AMOUNT = space_corps_mining_license_cost
					}
				}
			}
		}
		# log = "Creating mining station"
		orbit = {
			create_mining_station = {
				owner = prev.owner
			}
		}
		remove_fleet_flag = builder_has_destination
	}
	else_if = {
		limit = {
			exists = orbit
			exists = event_target:builder_destination
			orbit = {
				is_same_value = event_target:builder_destination
				has_deposit_for = shipclass_research_station
				has_research_station = no
			}
			owner = {
				space_corp_searches_research_stations = yes
				check_variable = {
					which = space_corp_budget_research_station
					value >= space_corps_mining_station_total_cost					# TODO change if necessary
				}
			}
		}
		owner = {
			# log = "Subtracting money"
			subtract_corp_money = {
				TYPE = research_station
				AMOUNT = space_corps_mining_station_total_cost
			}
			if = {
				limit = {
					exists = overlord
				}
				change_variable = {
					which = total_payed_for_licenses
					value = space_corps_mining_license_cost
				}
				overlord = {
					change_variable = {
						which = total_received_from_licenses
						value = space_corps_mining_license_cost
					}
					add_variable_resource = {
						RESOURCE = energy
						AMOUNT = space_corps_mining_license_cost
					}
				}
			}
		}
		# log = "Creating research station"
		orbit = {
			create_research_station = {
				owner = prev.owner
			}
		}
		remove_fleet_flag = builder_has_destination
		# TODO advanced stations
	}
	if = {
		# find new destination
		limit = {
			exists = solar_system			# if not, it means the fleet is currently ftl, so we will wait
			exists = owner.overlord			# if overlord is disconnected, we wait for reconnection
			OR = {
				is_fleet_idle = yes
				NOT = {
					has_fleet_flag = builder_has_destination
				}
			}
		}
		# log = "set_builders_orders.4"
		if = {
			limit = {
				owner.overlord = {
					space_corp_searches_mining_stations = yes
				}
				solar_system = {
					is_system_eligible_for_mining_station = yes
				}
			}
			# log = "set_builders_orders.5"
			builders_find_local_mining_station = yes
		}
		else_if = {
			limit = {
				owner.overlord = {
					space_corp_searches_research_stations = yes
				}
				solar_system = {
					is_system_eligible_for_research_station = yes
				}
			}
			# log = "set_builders_orders.5"
			builders_find_local_research_station = yes
		}
		else_if = {
			# TODO put local search for advanced?
			limit = {
				owner.overlord = {
					space_corp_searches_mining_stations = yes
				}
				has_close_system_eligible_for_mining_station = yes
			}
			# log = "set_builders_orders.6"
			builders_find_close_mining_station = yes
		}
		else_if = {
			limit = {
				owner.overlord = {
					space_corp_searches_research_stations = yes
				}
				has_close_system_eligible_for_research_station = yes
			}
			builders_find_close_research_station = yes
		}
	}
	# log = "set_builders_orders.7"
	if = {
		limit = {
			is_fleet_idle = yes
			has_fleet_flag = builder_has_destination
			exists = event_target:builder_destination
		}
		# log = "set_builders_orders.8"
		clear_fleet_actions = this
		queue_actions = {
			move_to = event_target:builder_destination
			orbit_planet = event_target:builder_destination
		}
		# auto_move_to_planet = {
		#     target = event_target:builder_destination
		#     clear_auto_move_on_arrival = yes
		#     arrival_effect = set_builders_orders
		# }
	}
	# log = "set_builders_orders.9"
	if = {
		limit = {
			owner = {
				should_destroy_builder = yes
			}
		}
		delete_fleet = this
	}
	else = {
		save_event_target_as = builder_fleet
		owner = {
			country_event = {
				id = space_corps_builder.10
				days = 30
				random = 30
			}
		}
	}
}

# this = fleet
builders_find_local_mining_station = {
	solar_system = {
		random_system_planet = {
			limit = {
				is_planet_eligible_for_mining_station = yes
			}
			save_event_target_as = builder_destination
		}
	}
	set_fleet_flag = builder_has_destination
}

# this = fleet
builders_find_local_research_station = {
	solar_system = {
		random_system_planet = {
			limit = {
				is_planet_eligible_for_research_station = yes
			}
			save_event_target_as = builder_destination
		}
	}
	set_fleet_flag = builder_has_destination
}

# this = fleet
builders_find_close_mining_station = {
	random_system = {
		limit = {
			has_access_fleet = prev.owner
			distance = {
				source = prev
				max_jumps = @builder_close_system
				type = hyperlane
			}
			is_system_eligible_for_mining_station = yes
		}
		random_system_planet = {
			limit = {
				is_planet_eligible_for_mining_station = yes
			}
			save_event_target_as = builder_destination
		}
	}
	set_fleet_flag = builder_has_destination
}

# this = fleet
builders_find_close_research_station = {
	random_system = {
		limit = {
			has_access_fleet = prev.owner
			distance = {
				source = prev
				max_jumps = @builder_close_system
				type = hyperlane
			}
			is_system_eligible_for_research_station = yes
		}
		random_system_planet = {
			limit = {
				is_planet_eligible_for_research_station = yes
			}
			save_event_target_as = builder_destination
		}
	}
	set_fleet_flag = builder_has_destination
}
